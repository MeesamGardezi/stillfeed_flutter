import 'package:flutter/foundation.dart';
import 'auth_service.dart';
import '../models/auth_state.dart';
import '../models/user_model.dart';

class AuthNotifier extends ValueNotifier<AuthState> {
  final AuthService _authService = AuthService();

  AuthNotifier() : super(AuthState.initial()) {
    _init();
  }

  void _init() {
    _authService.authStateChanges.listen((firebaseUser) async {
      if (firebaseUser != null) {
        await _loadUserProfile();
      } else {
        value = AuthState.unauthenticated();
      }
    });
  }

  Future<void> _loadUserProfile() async {
    try {
      value = AuthState.loading();
      final user = await _authService.getUserProfile();
      value = AuthState.authenticated(user);
    } catch (e) {
      value = AuthState.error(e.toString());
    }
  }

  Future<void> signUp({
    required String email,
    required String password,
    required String displayName,
    String? bio,
  }) async {
    try {
      value = AuthState.loading();

      await _authService.signUpWithEmail(
        email: email,
        password: password,
      );

      final user = await _authService.registerUserProfile(
        displayName: displayName,
        email: email,
        bio: bio,
      );

      value = AuthState.authenticated(user);
    } catch (e) {
      value = AuthState.error(e.toString());
      rethrow;
    }
  }

  Future<void> signIn({
    required String email,
    required String password,
  }) async {
    try {
      value = AuthState.loading();

      await _authService.signInWithEmail(
        email: email,
        password: password,
      );

      final user = await _authService.getUserProfile();
      value = AuthState.authenticated(user);
    } catch (e) {
      value = AuthState.error(e.toString());
      rethrow;
    }
  }

  Future<void> updateProfile({
    String? displayName,
    String? bio,
    String? profilePicUrl,
  }) async {
    try {
      final updatedUser = await _authService.updateProfile(
        displayName: displayName,
        bio: bio,
        profilePicUrl: profilePicUrl,
      );
      value = AuthState.authenticated(updatedUser);
    } catch (e) {
      value = AuthState.error(e.toString());
      rethrow;
    }
  }

  Future<void> sendPasswordReset(String email) async {
    try {
      await _authService.sendPasswordResetEmail(email);
    } catch (e) {
      rethrow;
    }
  }

  Future<void> signOut() async {
    try {
      await _authService.signOut();
      value = AuthState.unauthenticated();
    } catch (e) {
      value = AuthState.error(e.toString());
      rethrow;
    }
  }

  Future<void> deleteAccount() async {
    try {
      value = AuthState.loading();
      await _authService.deleteAccount();
      value = AuthState.unauthenticated();
    } catch (e) {
      value = AuthState.error(e.toString());
      rethrow;
    }
  }

  UserModel? get currentUser => value.user;

  bool get isAuthenticated => value.isAuthenticated;
}